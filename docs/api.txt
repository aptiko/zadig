.. _api:

=============
TwistyCMS API
=============

It is important to read the :ref:`concepts` document before studying
the API, otherwise you will not understand what I'm talking about.

Database core models
====================

In the description of the database models below, it goes without
saying that all models have an *id* field, which is usually not
mentioned unless there is something unusual about it.

Entry
-----

.. class:: twistycms.core.models.Entry(request, path)

   Stores an entry. It is always a subclass that is used, rather than
   :class:`~twistycms.core.models.Entry` itself. The constructor of
   the subclass creates a new entry at the specified path.  The parent
   entry must already exist and the logged on user must have
   appropriate permissions on the parent entry; otherwise, an
   exception is raised. If other entries with the same parent entry
   exist, the entry is added as the last sibling.
   
   :class:`~twistycms.core.models.Entry` objects have the following attributes:

   .. attribute:: twistycms.core.models.Entry.container

      A foreign key to :class:`~twistycms.core.models.Entry` (that is, to self). It
      indicates which entry contains the entry. This attribute can be
      null; there is one and only one entry that has a
      null :attr:`~twistycms.core.models.Entry.container`, and it is the root entry.

      The *related_name* of this attribute is ``all_subentries``.
      Therefore, if you have an entry ``myentry``, then
      ``myentry.all_subentries`` is the list of entries contained in
      ``myentry``. You should not, however, use ``all_subentries``, unless
      you have a good reason to do so; instead, use 
      :meth:`~twistycms.core.models.Entry.subentries`, which checks permissions.

   .. attribute:: twistycms.core.models.Entry.name

      The name of the entry.

   .. attribute:: twistycms.core.models.Entry.seq

      The sequence of the entry in its container: 1 for the first
      entry, 2 for the second entry, and so on.

   .. attribute:: twistycms.core.models.Entry.owner

      A foreign key to ``django.contrib.auth.models.User``, indicating
      the owner of the entry.

   .. attribute:: twistycms.core.models.Entry.state

      A foreign key to :class:`~twistycms.core.models.State`, indicating the state of
      the entry.

   :class:`~twistycms.core.models.Entry` objects also have the
   following properties:

   .. attribute:: twistycms.core.models.Entry.path

      This read-only property returns the URL path to the entry, not
      including a leading or trailing slash..

   .. attribute:: twistycms.core.models.Entry.descendant

      :class:`~twistycms.core.models.Entry` is always subclassed. If
      you get a grip on an object of type
      :class:`~twistycms.core.models.Entry` when in fact you need that
      same object but in its descendant class, and you don't know
      which subclass it is, use this property, which gives you the 
      same object but in the proper subclass.
      
   .. attribute:: twistycms.core.models.Entry.objects

      The default manager has the following additional methods:

      .. method:: twistycms.core.models.EntryManager.get_by_path(request, path)

         Return the entry at the specified path, or
         :const:`None` if such an entry does not exist or the user
         does not have permissions to view it.

   :class:`~twistycms.core.models.Entry` objects also have the following methods:

   .. method:: twistycms.core.models.Entry.get_permissions(request)

      Return the permissions the logged on user has on the entry.

   .. method:: twistycms.core.models.Entry.get_vobject(request[, version_number])

      Return the entry's vobject; actually returns a
      `twistycms.core.models.VObject` descendant. If *version_number*
      is not specified, it returns the latest vobject. An exception is
      raised if the user does not have permission to view the vobject.

   .. method:: twistycms.core.models.Entry.contains(entry)

      Check whether *entry* is contained, directly or indirectly, in
      *self*. Returns :const:`True` if *self* is the parent of
      *entry*, or the parent of its parent, or any ancenstor, and
      :const:`False` otherwise.

   .. method:: twistycms.core.models.Entry.get_subentries(request)

      Return a list of :class:`~twistycms.core.models.Entry` objects, which are the
      subentries which the user has permission to search, in order.

   .. method:: twistycms.core.models.Entry.reorder(request, source_seq, target_seq)

      Move the subentry with :samp:`seq={source_seq}` before subentry
      with :samp:`seq={target_seq}`.  *source_seq* and *target_seq*
      are integers.  The function changes the order of the children of
      the entry.  The child that has :samp:`seq={source_seq}` is moved
      before the child that has :samp:`seq={target_seq}`, unless
      *target_seq* is one more than the number of children, in which
      case the child is moved to the end. The other children are
      renumbered as needed (i.e.  their :attr:`~twistycms.core.models.Entry.seq`
      is modified accordingly).  Raises an exception if *source_seq*
      or *target_seq* are inappropriate; for example, if *source_seq*
      is larger than the number of children, or if *source_seq* and
      *target_seq* are both the same number. Also raises an exception
      if the user does not have permission to do this.

   .. method:: twistycms.core.models.Entry.edit_view(request[, new=False])

      Return a :class:`django.http.HttpResponse` object with the edit
      view of the vobject. Depending on the contents of *request*, it
      either processes a submitted form (either modifying the entry or
      finding an error in the submitted form) and returns the
      response, or it returns a page with a form for editing the
      entry.

      If *new* is :const:`True`, it means that the entry does not
      exist yet but is in the process of being created. When calling
      in this manner, *self* must be an
      :class:`~twistycms.core.models.Entry` subclass, and
      :attr:`~twistycms.core.models.Entry.container` must have been
      set to the entry of which the new entry will be a child; the
      other attributes are irrelevant.  Depending on the contents of
      *request*, the method will then either process a submitted form
      (either creating the entry or finding an error in the submitted
      form) and return the response, or return a page with a (mostly
      empty) form for filling in the entry.

VObject
-------

.. class:: twistycms.core.models.VObject

   This model is the parent of models that inherit it using
   multi-table inheritance, and stores a vobject.  This model does not
   actually store the content of the vobject; this is stored by the
   descendant model.  :class:`~twistycms.core.models.VObject` provides the following
   attributes and methods:
   
   .. attribute:: twistycms.core.models.VObject.entry

      Foreign key to ::class:`~twistycms.core.models.Entry`.

   .. attribute:: twistycms.core.models.VObject.version_number

      An integer

   .. attribute:: twistycms.core.models.VObject.date

      The date in which the vobject has been created.

   .. attribute:: twistycms.core.models.VObject.language

      A foreign key to :class:`~twistycms.core.models.Language` designating the language of
      the vobject.

   .. attribute:: twistycms.core.models.VObject.descendant

      :class:`~twistycms.core.models.VObject` is always subclassed. If
      you get a grip on an object of type
      :class:`~twistycms.core.models.VObject` when in fact you need that
      same object but in its descendant class, and you don't know
      which subclass it is, use this property, which gives you the 
      same object but in the proper subclass.
      
   .. method:: twistycms.core.models.VObject.end_view(request)

      Returns a :class:`django.http.HttpResponse` object with the end
      view of the vobject.

   .. method:: twistycms.core.models.VObject.info_view(request)

      Returns a :class:`django.http.HttpResponse` object with the end
      view of the vobject.
      
   :class:`~twistycms.core.models.VObject` has a custom manager:

   .. attribute:: twistycms.core.models.VObject.objects

      :attr:`objects` is similar to the default manager, except that
      it has an additional method:

      .. method:: get_by_path(request, path[, version_number])

         Return the vobject that corresponds to the entry at the
         specified path. If *version_number* is not specified,
         it returns the latest vobject. An exception is raised if the
         entry does not exist, or if the user does not have permission to
         view it.

Other models
------------

.. class:: twistycms.core.models.EntryPermission

   Permissions assigned to the entry besides those assigned to its
   state. Has three attributes: :attr:`entry`, :attr:`lentity` and
   :attr:`permission`, all foreign keys to the respective model.

.. class:: twistycms.core.models.Language

   Contains languages. It has only one field, :attr:`id`, storing the
   language id, as a 5-character long string, in the form "en" or
   "en_us" etc.

.. class:: twistycms.core.models.Permission

   A lookup that lists permissions: "view", "edit", "admin", "search",
   "delete". Has only a :attr:`descr` attribute.

.. class:: twistycms.core.models.Lentity

   A Lentity represents either a user or a group, and is used whenever
   any of the two can be used; for example, a certain permission can
   be given either to a user or to a group. It has three attributes:
   :attr:`user`, :attr:`group` and :attr:`special`.  The former two
   are foreign keys to :class:`django.contrib.auth.models.User` and
   :class:`django.contrib.auth.models.Group`. Either :attr:`user`, or
   :attr:`group`, or :attr:`special`, must be not null; the other two
   must be null. If :attr:`user` is not null, the
   :class:`~twistycms.core.models.Lentity` represents a user.  If :attr:`group`
   is not null, the :class:`~twistycms.core.models.Lentity` represents a group.
   If :attr:`special` is 1, it represents the anonymous user, and if
   :attr:`special` is 2, it represents all valid users (the logged on
   user).

.. class:: twistycms.core.models.State

   A list of states. Contains only a :attr:`descr` attribute.

.. class:: twistycms.core.models.StatePermission

   A state is a collection of permissions. This model stores the
   permissions that comprise the state. It has three attributes,
   :attr:`state`, :attr:`lentity` and :attr:`permission`, which are
   foreign keys to :class:`~twistycms.core.models.State`, :class:`~twistycms.core.models.Lentity`
   and :class:`~twistycms.core.models.Permission`, and designate that said lentity
   has said permission on said state.

.. class:: twistycms.core.models.StateTransition

   A state transition. Has two attributes, :attr:`source_state` and
   :attr:`target_state`, both foreign keys to :class:`~twistycms.core.models.State`.

.. class:: twistycms.core.models.Workflow

   A workflow is a collection of states and state-transition rules.
   The model has three attributes: :attr:`name`, which is a string,
   :attr:`states`, and :attr:`state_transitions`. The last two are
   many to many fields to :class:`~twistycms.core.models.State` and
   :class:`~twistycms.core.models.StateTransition`.

.. class:: twistycms.core.models.VObjectMetatags

   Stores the metatags of a vobject. Has five attributes:
   :attr:`vobject` and :attr:`language` are foreign keys to the
   respective models; :attr:`title`, :attr:`short_title` and
   :attr:`description` are strings.

   The default manager has an additional method, :meth:`default`,
   which returns the default set of metatags. This is normally the set
   of metatags in the language of the vobject; but if such a set does
   not exist, :meth:`default` returns a random set of metatags.

.. class:: twistycms.core.models.ContentFormat

   A lookup storing content formats, such as "text/html" or
   "text/x-rst". Has only a :attr:`descr` field.

.. class:: twistycms.core.models.Page(VObject)

   Inherits :class:`~twistycms.core.models.VObject` and designates a page. Has
   attributes :attr:`format`, a foreign key to
   :class:`~twistycms.core.models.ContentFormat`, and :attr:`content`, a text field.

.. class:: twistycms.core.models.File(VObject)

   Inherits :class:`~twistycms.core.models.VObject` and designates a file. Has
   attribute :attr:`content`, a file field.
   
.. class:: twistycms.core.models.Image(VObject)

   Inherits :class:`~twistycms.core.models.VObject` and designates an image. Has
   attribute :attr:`content`, an image field.

Utility functions
=================

The functions below are in module twistycms.core.utils.

.. function:: twistycms.core.utils.split_path(path)

   Return a list with the path items. Roughly :samp:`path.split('/')`
   but not confused by trailing slash, will ignore a starting slash,
   will work on an empty string or single slash, and it always
   includes an empty string as the first path item, which stands for
   the root entry.

.. function:: twistycms.core.utils.get_current_path(request)

   Return the path to the current entry. This is something like
   request.path, but does not include any directive like ``__edit__``
   and so on.

.. function:: twistycms.core.utils.primary_buttons(request, vobject, selected_view)

   Return a list of dictionaries, where each dictionary is a primary
   button.

.. function:: twistycms.core.utils.secondary_buttons(request, vobject)

   Return a list of dictionaries, where each dictionary is a secondary
   button.

.. function:: twistycms.core.utils.sanitize_html(html)

   Sanitize the HTML provided and return a sanitized version. This is
   done for two reasons: (a) to avoid cross site scripting attacks;
   (b) to discourage users from using too much markup. It only allows
   specific (whitelisted) tags and specific (whitelisted) attributes,
   deleting all the rest, and it also sanitizes the content of *href*
   and *src* attributes, by allowing only specific (whitelisted) URL
   schemes. The whitelists are hardwired in this version.
