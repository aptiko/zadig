.. _api:

=========
Zadig API
=========

It is important to read the :ref:`concepts` document before studying
the API, otherwise you will not understand what I'm talking about.

In the description of the database models below, it goes without
saying that all models have an *id* field, which is usually not
mentioned unless there is something unusual about it.


The Entry model
===============

.. class:: zadig.core.models.Entry(request, path)

   Stores an entry. It is always a subclass that is used, rather than
   :class:`~zadig.core.models.Entry` itself. The constructor of
   the subclass creates a new entry at the specified path.  The parent
   entry must already exist and the logged on user must have
   appropriate permissions on the parent entry; otherwise, an
   exception is raised. If other entries with the same parent entry
   exist, the entry is added as the last sibling.
   
   The default manager for :class:`~zadig.core.models.Entry` has an
   additional method:

   .. attribute:: zadig.core.models.Entry.objects

      .. method:: get_by_path(request, path)

         Return the entry at the specified path; raise
         ``django.http.Http404`` if such an entry does not exist or
         the user does not have permissions to view it (you normally
         don't need to handle that exception: it will result in a 404
         page).

         Generally you should much prefer to use the above method
         when retrieving Entries, because it will take care of
         permissions at a low level.

   :class:`~zadig.core.models.Entry` objects have the following attributes:

   .. attribute:: zadig.core.models.Entry.btemplate

      A string with the filename of the base template. If empty, it
      means to use the same template as the parent entry; see
      :attr:`~zadig.core.models.Entry.base_template` for more
      information.

   .. attribute:: zadig.core.models.Entry.container

      A foreign key to :class:`~zadig.core.models.Entry` (that is,
      to self). It indicates which entry contains the entry. This
      attribute can be null; there is one and only one entry that has
      a null :attr:`~zadig.core.models.Entry.container`, and it is
      the root entry.

      You should generally not use this attribute; use the
      :attr:`~zadig.core.models.Entry.rcontainer` property
      instead.

      The *related_name* of this attribute is ``all_subentries``.
      Therefore, if you have an entry ``myentry``, then
      ``myentry.all_subentries`` is the list of entries contained in
      ``myentry``. You should not, however, use ``all_subentries``, unless
      you have a good reason to do so; instead, use 
      :meth:`~zadig.core.models.Entry.subentries`, which checks
      permissions and which assigns the :ref:`request object
      <request-object>` to the subentries.

   .. attribute:: zadig.core.models.Entry.multilingual_group

      A foreign key to
      :class:`~zadig.core.models.MultilingualGroup`, indicating
      the multilingual group, if any, to which the entry belongs.

   .. attribute:: zadig.core.models.Entry.name

      The name of the entry.

   .. attribute:: zadig.core.models.Entry.owner

      A foreign key to ``django.contrib.auth.models.User``, indicating
      the owner of the entry.

   .. attribute:: zadig.core.models.Entry.seq

      The sequence of the entry in its container: 1 for the first
      entry, 2 for the second entry, and so on.

   .. attribute:: zadig.core.models.Entry.state

      A foreign key to :class:`~zadig.core.models.State`, indicating
      the state of the entry.

   :class:`~zadig.core.models.Entry` objects also have the
   following properties and methods:

   .. attribute:: zadig.core.models.Entry.absolute_uri

      This read-only property returns the absolute URI of the end view
      of the entry.  See also :attr:`~zadig.core.models.Entry.path`
      and :attr:`~zadig.core.models.Entry.spath`.

   .. method:: zadig.core.models.Entry.add_details(vobject, form)

      The :meth:`~zadig.core.models.Entry.edit_view` method is
      implemented in :class:`~zadig.core.models.Entry` and not in
      its subclasses. When creating a new vobject as a result of edit
      form submission, it doesn't know how to process all attributes
      submitted with the form. It therefore processes only those it
      can, and then calls this method (which should be implemented in
      the subclass), which should process any *form* attributes
      special to the subclass and modify *vobject* accordingly.

   .. attribute:: zadig.core.models.Entry.alt_lang_entries

      A list with the alternative language entries. The order in this
      list is the order with which languages are listed in
      :data:`ZADIG_LANGUAGES`.

   .. attribute:: zadig.core.models.Entry.base_template

      A string with the filename the base template the entry should
      use. This is the base template used to render the page (the base
      template inherited by the actual template). The result is
      :attr:`~zadig.core.models.Entry.btemplate`, except if this is
      empty, in which case the parent's base template is used; if the
      top level entry's ``btemplate`` attribute is also empty, then
      ``base.html`` is returned.

   .. method:: zadig.core.models.Entry.can_contain(cls)

      Not all kinds of objects can contain all kinds of objects; for
      example, only blog objects can contain blog post objects; and
      blog post objects cannot contain other pages.  Each
      :class:`~zadig.core.models.Entry.Entry` subclass has the
      :meth:`~zadig.core.models.Entry.can_contain` and the
      :meth:`~zadig.core.models.Entry.can_be_contained` class method
      that indicate what kind of objects can be added as subobjects. 

      .. admonition:: Note

         In this text, we use "subobjects" in the containment sense;
         that is, an object can contain subobjects. We use "subclass"
         in the usual hierarchical sense.

      :class:`~zadig.core.models.Entry` subclass has the The
      :meth:`~zadig.core.models.Entry.can_contain` method
      indicates whether the object is willing to contain a *cls*
      subobject, where *cls* is an :class:`~zadig.core.models.Entry`
      subclass; and the
      :meth:`~zadig.core.models.Entry.can_be_contained` class
      method indicates whether the class is willing to create a new
      subobject of *parent*, where *parent* is an
      :class:`~zadig.core.models.Entry` subclass. You should only call
      the later, because it calls the former itself, whereas the
      former does not call the latter and therefore may miss
      additional restrictions.

      The toplevel :meth:`~zadig.core.models.Entry.can_contain` 
      returns :const:`True`, provided that the user has appropriate
      permissions. The toplevel
      :meth:`~zadig.core.models.Entry.can_be_contained` returns
      :samp:`{parent}.can_contain({cls})`. See the
      :class:`zadig.zblog.BlogPostEntry` implementation for an
      example of reimplementing these methods in a subclass.

   .. classmethod:: zadig.core.models.Entry.can_be_contained(parent)

      See the :meth:`~zadig.core.models.Entry.can_contain` method.

   .. method:: zadig.core.models.Entry.contains(entry)

      Check whether *entry* is contained, directly or indirectly, in
      *self*. Returns :const:`True` if *self* is the parent of
      *entry*, or the parent of its parent, or any ancenstor, and
      :const:`False` otherwise.

   .. method:: zadig.core.models.Entry.contents_view()

      Return a :class:`django.http.HttpResponse` object with the
      contents view of the entry.

   .. attribute:: zadig.core.models.Entry.creation_date

      The date the entry was created, i.e. the date of its first
      vobject. See also
      :attr:`~zadig.core.models.Entry.last_modification_date`.

   .. attribute:: zadig.core.models.Entry.descendant

      :class:`~zadig.core.models.Entry` is always subclassed. If
      you get a grip on an object of type
      :class:`~zadig.core.models.Entry` when in fact you need that
      same object but in its descendant class, and you don't know
      which subclass it is, use this property, which gives you the 
      same object but in the proper subclass.

   .. method:: zadig.core.models.Entry.edit_subform(data=None, files=None, new=False)

      When the object is being edited, a form is shown to the user;
      this consists of items that are common to all
      :class:`~zadig.core.models.Entry` subclasses, plus items that
      are specific to the subclass. The items that are specific to the
      subclass are the *edit subform*, and they are a Django form,
      i.e. a :class:`django.forms.Form` subclass.
      :meth:`~zadig.core.models.Entry.edit_subform` returns that form.
      If *data* (and optionally *files*) are specified, it returns a
      bound form (``data=request.POST`` and ``files=request.FILES`` is
      normally specified upon a POST request); otherwise, if *new* is
      :const:`True`, we are creating a new entry (normally an empty
      form should be returned); otherwise, we are editing an existing
      entry (normally an unbound form with the last vobject data as
      initial data should be returned).

      The toplevel :meth:`~zadig.core.models.Entry.edit_subform`
      returns an empty form. Subclasses should redefine as needed.

   .. method:: zadig.core.models.Entry.edit_view([new=False])

      Return a :class:`django.http.HttpResponse` object with the edit
      view of the vobject. Depending on the contents of the
      :ref:`request object <request-object>`, it
      either processes a submitted form (either modifying the entry or
      finding an error in the submitted form) and returns the
      response, or it returns a page with a form for editing the
      entry. *self* must be an :class:`~zadig.core.models.Entry`
      subclass.

      If *new* is :const:`True`, it means that the entry does not
      exist yet but is in the process of being created. When calling
      in this manner, *self* must be an
      :class:`~zadig.core.models.Entry` subclass, and
      :attr:`~zadig.core.models.Entry.container` must have been
      set to the entry of which the new entry will be a child; the
      other attributes are irrelevant.  Depending on the contents of
      the :ref:`request object <request-object>`, the method will then
      either process a submitted form
      (either creating the entry or finding an error in the submitted
      form) and return the response, or return a page with a (mostly
      empty) form for filling in the entry.

   .. method:: zadig.core.models.Entry.get_vobject([version_number])

      Return the entry's vobject; actually returns a
      :class:`~zadig.core.models.VObject` descendant. If *version_number*
      is not specified, it returns the latest vobject. An exception is
      raised if the user does not have permission to view the vobject.

   .. method:: zadig.core.models.Entry.last_modification_date

      The last modification date of the entry, i.e. the date of its
      latest vobject.

   .. method:: zadig.core.models.Entry.history_view()

      Return a :class:`django.http.HttpResponse` object with the
      history view of the entry.

   .. method:: zadig.core.models.Entry.move(target_entry)

      Move the entry from its current container to *target_entry*,
      which will be the new container. Also create a new redirection
      entry at the old location. Verifies permissions to do all that.

   .. attribute:: zadig.core.models.Entry.ownername

      Return the owner full name, if available, otherwise the
      username.

   .. attribute:: zadig.core.models.Entry.path

      This read-only property returns the URL path to the entry, not
      including a leading or trailing slash. See also
      :attr:`~zadig.core.models.Entry.spath` and
      :attr:`~zadig.core.models.Entry.absolute_uri`.

   .. attribute:: zadig.core.models.Entry.permissions

      Return the permissions the logged on user has on the entry.

   .. method:: zadig.core.models.Entry.permissions_view()

      Return a :class:`django.http.HttpResponse` object with the
      permissions view of the entry.

   .. method:: zadig.core.models.Entry.process_edit_subform(vobject, subform)

      After the user submits the edit view, the subform returned by 
      :meth:`~zadig.core.models.Entry.edit_subform` must be processed.
      This method receives the newly created *vobject* and the
      submitted *subform* and processes as needed. The top level
      method does nothing; it is subclasses that must define how the
      processing is done.

   .. attribute:: zadig.core.models.Entry.rcontainer

      Use this instead of :attr:`~zadig.core.models.Entry.container``
      and the resulting :class:`~zadig.core.models.Entry` object
      will also have the :ref:`request object <request-object>` set.

   .. method:: zadig.core.models.Entry.rename(newname)

      Rename the entry to the specified new name; it also creates a
      new redirection entry with the old name.

   .. method:: zadig.core.models.Entry.reorder(source_seq, target_seq)

      Move the subentry with :samp:`seq={source_seq}` before subentry
      with :samp:`seq={target_seq}`.  *source_seq* and *target_seq*
      are integers.  The function changes the order of the children of
      the entry.  The child that has :samp:`seq={source_seq}` is moved
      before the child that has :samp:`seq={target_seq}`, unless
      *target_seq* is one more than the number of children, in which
      case the child is moved to the end. The other children are
      renumbered as needed (i.e.  their :attr:`~zadig.core.models.Entry.seq`
      is modified accordingly).  Raises an exception if *source_seq*
      or *target_seq* are inappropriate; for example, if *source_seq*
      is larger than the number of children, or if *source_seq* and
      *target_seq* are both the same number. Also raises an exception
      if the user does not have permission to do this.

   .. method:: zadig.core.models.Entry.set_altlang(altpath)

      Set :attr:`~zadig.core.models.Entry.multilingual_group` so
      that the entry specified by *altpath* is an alternative language
      entry. *altpath* is a path to another entry.
      
      Note that this method will rarely, if ever return an error: it
      tries to be smart and do the right thing. Maybe it's too smart.
      One case where it raises an exception is if this entry and the
      other entry are in the same language or they don't have a
      language specified.

      If the entry specified by *altpath* does not exist or is
      inaccessible, the method does nothing. 

      If one of the entries involved (say A) is already in a
      multilingual group, and the other entry (say B) is not, it adds
      B to the multilingual group of A, unless there is already an
      entry with that language in the group; in that case, it removes
      A from the group and creates a new multilingual group for A and
      B.

      If both entries are already in multilingual groups, it attempts
      to join these groups together; but again, if there are language
      conflicts, it removes one or both of the entries from their old
      groups as needed.

   .. attribute:: zadig.core.models.Entry.spath

      This read-only property returns the full relative URL path to
      the entry, starting and ending in a slash. (This is more
      complicated than just prefixing and suffixing
      :attr:`~zadig.core.models.Entry.path` with a slash, because
      then the root entry would be two slashes instead of one.) See
      also :attr:`~zadig.core.models.Entry.path` and
      :attr:`~zadig.core.models.Entry.absolute_uri`.

   .. attribute:: zadig.core.models.Entry.subentries

      A list of :class:`~zadig.core.models.Entry` objects, which are the
      subentries which the user has permission to search, in order.

   .. attribute:: zadig.core.models.Entry.template_name

      This class attribute is the name of the template for editing the
      entry. Frequently the inherited value is OK.

   .. attribute:: zadig.core.models.Entry.touchable

      ``True`` if the current user has either *edit* or *admin*
      permission on the entry. Primarily used by the template to check
      whether to show the editing buttons.

   .. attribute:: zadig.core.models.Entry.type

      The class name, such as "PageEntry", or "ImageEntry".
      
   .. attribute:: zadig.core.models.Entry.typename

      This is a class attribute, with a translatable, human readable
      name for the type, such as "Page" or "Image".

   .. method:: zadig.core.models.Entry.undelete()

      When called on an entry whose last vobject is a
      :attr:`~zadig.core.models.VObject.deletion_mark,` it creates an
      additional vobject identical in content to the vobject before
      undeletion, thereby reverting to that last vobject.

   .. attribute:: zadig.core.models.Entry.vobject

      This is the same as
      :meth:`~zadig.core.models.Entry.get_vobject()` without an
      argument.

The VObject model
=================

.. class:: zadig.core.models.VObject

   This model is the parent of models that inherit it using
   multi-table inheritance, and stores a vobject.  This model does not
   actually store the content of the vobject; this is stored by the
   descendant model.  :class:`~zadig.core.models.VObject` provides the following
   attributes and methods:
   
   .. attribute:: zadig.core.models.VObject.entry

      Foreign key to ::class:`~zadig.core.models.Entry`. Note that
      you should avoid using this attribute; instead, use
      :attr:`~zadig.core.models.VObject.rentry`.

   .. attribute:: zadig.core.models.VObject.version_number

      An integer.

   .. attribute:: zadig.core.models.VObject.date

      The date in which the vobject has been created.

   .. attribute:: zadig.core.models.VObject.deletion_mark

      If this boolean attribute is :const:`True`, then this vobject is
      a deletion mark, which means that the entry was marked as
      deleted when this vobject was created. The vobject's metatags
      and content are irrelevant in this case.
      
   .. attribute:: zadig.core.models.VObject.language

      A foreign key to :class:`~zadig.core.models.Language` designating the
      language of the vobject.

   .. attribute:: zadig.core.models.VObject.descendant

      :class:`~zadig.core.models.VObject` is always subclassed. If
      you get a grip on an object of type
      :class:`~zadig.core.models.VObject` when in fact you need that
      same object but in its descendant class, and you don't know
      which subclass it is, use this property, which gives you the 
      same object but in the proper subclass.

   .. attribute:: zadig.core.models.VObject.rentry

      Use this instead of :attr:`~zadig.core.models.VObject.entry`
      and the resulting :class:`~zadig.core.models.Entry` object
      will also have the :ref:`request object <request-object>` set.
      
   .. attribute:: zadig.core.models.VObject.metatags

      The set of metatags of the vobject. This is like the related
      name of :class:`~zadig.core.models.VObjectMetatags`, but it
      also passes the request object; see
      :class:`~zadig.core.models.VObjectMetatags` for more
      information.

   .. method:: zadig.core.models.VObject.end_view()

      Return a :class:`django.http.HttpResponse` object with the end
      view of the vobject.

   .. method:: zadig.core.models.VObject.info_view()

      Returns a :class:`django.http.HttpResponse` object with the end
      view of the vobject.
      
   .. method:: zadig.core.models.VObject.view_deleted()

      Used internally. When a vobject is deleted (i.e. has
      :attr:`~zadig.core.models.VObject.deletion_mark` set), then this
      method is called to return the view, rather than its other
      methods. This method decides if it should return a response or
      whether it should raise a :exc:`django.http.Http404`.

   .. method:: zadig.core.models.VObject.duplicate()

      Create and save an exact copy of the vobject; the only thing
      that is different in the newly created vobject is its id and
      date. Related models are also copied and saved. Used for
      reverting an entry to an old vobject.

   :class:`~zadig.core.models.VObject` has a custom manager:

   .. attribute:: zadig.core.models.VObject.objects

      :attr:`objects` is similar to the default manager, except that
      it has an additional method:

      .. method:: get_by_path(request, path[, version_number])

         Return the vobject that corresponds to the entry at the
         specified path. If *version_number* is not specified,
         it returns the latest vobject.  ``django.http.Http404`` is
         raised if the entry does not exist or the user does not have
         permissions to view it (you normally don't need to handle
         that exception: it will result in a 404 page).

Other core models
=================

.. class:: zadig.core.models.EntryPermission

   Permissions assigned to the entry besides those assigned to its
   state. Has three attributes: :attr:`entry`, :attr:`lentity` and
   :attr:`permission`, all foreign keys to the respective model.

.. class:: zadig.core.models.Language

   Contains languages. It has only one field, :attr:`id`, storing the
   language id, as a 5-character long string, in the form "en" or
   "en_us" etc.

.. class:: zadig.core.models.Permission

   A lookup that lists permissions: "view", "edit", "admin", "search",
   "delete". Has only a :attr:`descr` attribute.

.. class:: zadig.core.models.Lentity

   A Lentity represents either a user or a group, and is used whenever
   any of the two can be used; for example, a certain permission can
   be given either to a user or to a group. It has three attributes:
   :attr:`user`, :attr:`group` and :attr:`special`.  The former two
   are foreign keys to :class:`django.contrib.auth.models.User` and
   :class:`django.contrib.auth.models.Group`. Either :attr:`user`, or
   :attr:`group`, or :attr:`special`, must be not null; the other two
   must be null. If :attr:`user` is not null, the
   :class:`~zadig.core.models.Lentity` represents a user.  If :attr:`group`
   is not null, the :class:`~zadig.core.models.Lentity` represents a group.
   If :attr:`special` is 1, it represents the anonymous user, and if
   :attr:`special` is 2, it represents all valid users (the logged on
   user).

.. class:: zadig.core.models.State

   A list of states. Contains only a :attr:`descr` attribute.

.. class:: zadig.core.models.StatePermission

   A state is a collection of permissions. This model stores the
   permissions that comprise the state. It has three attributes,
   :attr:`state`, :attr:`lentity` and :attr:`permission`, which are
   foreign keys to :class:`~zadig.core.models.State`, :class:`~zadig.core.models.Lentity`
   and :class:`~zadig.core.models.Permission`, and designate that said lentity
   has said permission on said state.

.. class:: zadig.core.models.StateTransition

   A state transition. Has two attributes, :attr:`source_state` and
   :attr:`target_state`, both foreign keys to :class:`~zadig.core.models.State`.

.. class:: zadig.core.models.Workflow

   A workflow is a collection of states and state-transition rules.
   The model has three attributes: :attr:`name`, which is a string,
   :attr:`states`, and :attr:`state_transitions`. The last two are
   many to many fields to :class:`~zadig.core.models.State` and
   :class:`~zadig.core.models.StateTransition`.

.. class:: zadig.core.models.VObjectMetatags

   Stores the metatags of a vobject. Has five attributes:
   :attr:`vobject` and :attr:`language` are foreign keys to the
   respective models; :attr:`title`, :attr:`short_title` and
   :attr:`description` are strings. Also has method
   :meth:`get_short_title`, which returns the short title, or the
   title if the short title is empty.

   The default manager has an additional property, :attr:`default`,
   which returns an appropriate set of metatags. Normally the manager
   has access to the :ref:`request object <request-object>`, in which
   case it returns the metatags in the effective language. Failing
   that (because the request object is unavailable, or because there
   are no metatags in the effective language), it returns the 
   metatags in the language of the vobject; and if such a set does
   not exist, it returns a random set of metatags.  (The manager
   normally has access to the request object because you normally
   write ``v.metatags.default``, where ``v`` is a *vobject* object, in
   which case ``v`` passes the request object to the manager.)

.. class:: zadig.core.models.ContentFormat

   A lookup storing content formats, such as "text/html" or
   "text/x-rst". Has only a :attr:`descr` field.

.. class:: zadig.core.models.MultilingualGroup

   Stores the multilingual groups. It has no field besides id, as it
   is only used to group multilingual entries together through their
   :attr:`~zadig.core.models.Entry.multilingual_group` field. It
   has a :meth:`check()` method, which checks for integrity: it
   deletes the group if it contains less than two entries, checks
   that there are no multiple language occurrences in the group, makes
   other similar checks, and raises
   :exc:`~django.core.exceptions.ValidationError` if a check fails.

.. class:: zadig.core.models.Page(VObject)

   Inherits :class:`~zadig.core.models.VObject` and designates a page. Has
   attributes :attr:`format`, a foreign key to
   :class:`~zadig.core.models.ContentFormat`, and :attr:`content`, a text field.

.. class:: zadig.core.models.File(VObject)

   Inherits :class:`~zadig.core.models.VObject` and designates a file. Has
   attribute :attr:`content`, a file field.
   
.. class:: zadig.core.models.Image(VObject)

   Inherits :class:`~zadig.core.models.VObject` and designates an image. Has
   attribute :attr:`content`, an image field.

   
Utility functions
=================

The functions below are in module zadig.core.utils.

.. function:: zadig.core.utils.split_path(path)

   Return a list with the path items. Roughly :samp:`path.split('/')`
   but not confused by trailing slash, will ignore a starting slash,
   will work on an empty string or single slash, and it always
   includes an empty string as the first path item, which stands for
   the root entry.

.. function:: zadig.core.utils.join_path(path_items)

   Return a string with the path items joined into a path.
   *path_items* is a sequence of strings (supplied either as string
   arguments, or as a single sequence argument); each string may
   contain slashes. Roughly :samp:`'/'.join(path_items)` but will not
   result in duplicate slashes (strips leading and trailing slashes
   from each path item before joining), and the result never includes
   a trailing or leading slash.

.. function:: zadig.core.utils.get_current_path(request)

   Return the path to the current entry. This is something like
   ``request.path``, but does not include any directive like ``__edit__``
   and so on.

.. function:: zadig.core.utils.get_preferred_language(request)

   Return the id of the language selected by the user (found in the
   session), or the default language if the user has not selected a
   language.

.. function:: zadig.core.utils.get_effective_language(request)

   Return the id of the language selected by the user (found in the
   session), or the default language if the user has not selected a
   language.

.. function:: zadig.core.utils.sanitize_html(html)

   Sanitize the HTML provided and return a sanitized version. This is
   done for two reasons: (a) to avoid cross site scripting attacks;
   (b) to discourage users from using too much markup. It only allows
   specific (whitelisted) tags and specific (whitelisted) attributes,
   deleting all the rest, and it also sanitizes the content of *href*
   and *src* attributes, by allowing only specific (whitelisted) URL
   schemes. The whitelists are hardwired in this version.
