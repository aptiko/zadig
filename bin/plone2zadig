#!/usr/bin/python
"""
plone2zadig converts a Plone site to a Zadig site. It does so
by visiting the Plone site on the web. The script must log on the
Plone site as a user who has edit permissions on all pages (the
administrator for example).

Usage: plone2zadig config_file

The config_file a collection of lines of the form "OPTION=value".  It
is actually a Python program that defines several variables. The
options are:

The options are:

  PLONE_URL
      The topmost Plone url to start converting. That page and all its
      subpages (except those marked for exclusion) will be read and converted.

  PLONE_EXCLUDE
      The URIs of this tuple will be excluded from conversion. The URIs can be
      full URLs or relative paths whose base is PLONE_URL.

  PLONE_AUTH
      The value the __ac cookie should have. It must be a user capable
      of editing all the objects from PLONE_URL downwards.

  TARGET_PATH
      Will migrate PLONE_URL to this Zadig path, and subobjects to
      subpaths.

  REMOVE_TARGET
      Specifies what happens if TARGET_PATH already exists. If True,
      the TARGET_PATH and its subentries are deleted before migration;
      if False (the default), its content is overwritten, as is the
      content of any already existing subentry. When such overwriting
      occurs, the existing object and the overwriting object must be
      of the same type, or an exception is raised.

  OWNER
      The objects created in Zadig will belong to this user.

  DEFAULT_LANGUAGE
      When a Plone page is "language neutral", it will be considered
      to be in this language.

  LOG_LEVEL
      The logging level; one of DEBUG, INFO, WARNING, ERROR, and
      CRITICAL.  Default is WARNING. Don't use CRITICAL, it will miss
      the errors.

All the above except LOG_LEVEL and PLONE_EXCLUDE are compulsory.

"""

import sys
import urllib2
import logging
import re
from urlparse import urlparse, urljoin
from cgi import parse_qs

from BeautifulSoup import BeautifulSoup, Tag

from django.conf import settings
from django.db import transaction
from django.http import Http404

from zadig.core.utils import sanitize_html, split_path, join_path
from zadig.core import models


class UnknownPloneObjectType(Exception): pass


def get_response(url):
    """Get the data from the url, which should be Plone. Send the logon cookie
    during the request, to make sure we are logged on to Plone."""
    request = urllib2.Request(url)
    cookies = '__ac="%s"' % (PLONE_AUTH,)
    request.add_header('Cookie', cookies)
    return urllib2.urlopen(request)

def get_title(soup):
    """Extract and return the document title from its soup. The title is inside
    a <h1>, which may either contain the title itself, or a <span> containing
    the title."""
    h1 = soup.find('h1')
    span = h1.find('span')
    return span.string.strip() if span else h1.string.strip()

class PloneObject(object):

    def __new__(cls, url, soup=None):
        """Don't return a PloneObject; return a subclass object, depending on
        what we find at the url."""
        if cls != PloneObject:
            # It's a subclass being created
            return super(PloneObject, cls).__new__(cls)
        logging.info("Working on %s" % (url,))
        assert(soup is None)
        soup = BeautifulSoup(get_response(url).read())
        t = soup.find('li', id='contentview-folderContents')
        if t:
            # It has a contents tab, therefore it could be a folder
            folder_contents_link = t.a['href']
            if not url.endswith('/'): url += '/'
            if folder_contents_link == url + 'folder_contents':
                # Yes, it's a folder
                logging.debug("(It's a folder)")
                return super(PloneObject, cls).__new__(PloneFolder)
            # Otherwise, we assume it is the default folder view
            logging.debug("(It's a default folder view)")
            return super(PloneObject, cls).__new__(PloneDefaultFolderView)
        body_classes = soup.find('body')['class'].split()
        if 'template-document_view' in body_classes:
            logging.debug("(It's a page)")
            return super(PloneObject, cls).__new__(PlonePage)
        if 'template-image_view' in body_classes:
            logging.debug("(It's an image)")
            return super(PloneObject, cls).__new__(PloneImage)
        if 'template-link_view' in body_classes:
            logging.debug("(It's a link)")
            return super(PloneObject, cls).__new__(PloneLink)
        if 'template-file_view' in body_classes:
            logging.debug("(It's a file)")
            return super(PloneObject, cls).__new__(PloneFile)
        raise UnknownPloneObjectType("Unknown object type at "+url)
        raise UnknownPloneObjectType("Unknown object type at "+url)

    def __find_alternative_lang(self, path):
        """Determine a page in another language which is a translation of
        this page and which exists in the target database."""
        self.alternative_lang = None
        language_selector = self.soup.find('ul', id='portal-languageselector')
        if not language_selector: return
        for x in language_selector.findAll('li'):
            (d1, d2, apath, d4, query, d6) = urlparse(x.a['href'])
            altlang = parse_qs(query).get('set_language', '')[0] 
            if altlang==self.language.id or split_path(apath)==split_path(path):
                continue
            try:
                e = models.Entry.objects.get_by_path(request, apath).descendant
            except Http404:
                continue
            while isinstance(e, models.InternalRedirectionEntry):
                e = e.vobject.target
            if split_path(e.path)==split_path(path):
                continue
            self.alternative_lang = e.path
            break
        logging.debug("Alternative language: "+str(self.alternative_lang))

    def __find_modification_time(self):
        """Determine the "last modified" time of the plone object."""
        from datetime import datetime
        self.modification_time = datetime.now()
        span_documentModified = self.soup.find('span', 'documentModified')
        if not span_documentModified: return
        m = re.search(r'\s([A-Z][a-z]{2})\s+(\d{1,2}),\s+(\d{4})\s+'
                      r'(\d{2}):(\d{2})\s+([AP]M)\s',
                      str(span_documentModified))
        if not m: return
        (monthname, day, year, hour, minute, ampm) = m.groups()
        month = {'Jan': 1, 'Feb': 2, 'Mar': 3, 'Apr': 4, 'May': 5, 'Jun': 6,
                 'Jul': 7, 'Aug': 8, 'Sep': 9, 'Oct':10, 'Nov':11, 'Dec':12
                }[monthname]
        (day, year, hour, minute) = [int(x) for x in (day, year, hour, minute)]
        if hour==12: hour = 0
        if ampm=="PM": hour+=12
        self.modification_time = datetime(year, month, day, hour, minute)
        logging.debug("Last modified: " + self.modification_time.isoformat(' '))

    def get_editsoup(self):
        # Unlock the object if it's locked
        for msg_dl in self.soup.findAll('dl', 'portalMessage info'):
            unlock_form = msg_dl.dd.form
            if unlock_form and unlock_form['action'].endswith('force_unlock'):
                logging.warn("Object %s is locked; unlocking" % (self.url))
                self.soup = BeautifulSoup(
                                    get_response(unlock_form['action']).read())
        editurl = self.soup.find('li', attrs={'id': 'contentview-edit'}
                                                                    ).a['href']
        html = get_response(editurl).read()
        self.editsoup = BeautifulSoup(html)

    def __init__(self, url, soup=None, editsoup=None):
        """Retrieve title, description and state from a Plone page;
        for subclasses, also retrieve content. soup is the BeautifulSoup object
        resulting from parsing the url. editsoup is the soup resulting from
        clicking the Plone "Edit" tab."""
        self.url = url
        if not soup:
            html = get_response(url).read()
            self.soup = BeautifulSoup(html)
        if not editsoup:
            self.get_editsoup()
        self.title = get_title(self.soup)
        self.short_title = ''
        self.description = self.editsoup.find('textarea', id='description'
                                                            ).string
        if not self.description: self.description = ""
        self.state = 'Published'
        workflowmenu = self.soup.find('dl', id='plone-contentmenu-workflow')
        if workflowmenu:
            self.state = workflowmenu.dt('span')[1].string.strip()
                            
    def migrate(self, request, path, entry_type):
        """This is always called from a subclass and does a little common part
        of the job at the beginning, most important of which is to create
        and save the entry."""
        # Find language and other settings of object by checking the contents of
        # its various views.
        nonav = self.editsoup.find('input', id='excludeFromNav')
        self.no_nav = nonav and nonav.has_key('checked')
        self.language = models.Language.objects.get(id=DEFAULT_LANGUAGE)
        selectlang = self.editsoup.find('select', attrs={'id': 'language'})
        if selectlang:
            l = selectlang.find('option', attrs={'selected': 'selected'})
            if l:
                self.language = models.Language.objects.get(id=l['value'])
        self.__find_alternative_lang(path)
        self.__find_modification_time()

        # Prepare and save the entry
        # No need to check REMOVE_TARGET at this point, if True then the entry
        # will have already been removed and an Http404 exception will be raised
        # and handled below.
        try: 
            self.entry = models.Entry.objects.get_by_path(request, path
                                                                ).descendant
        except Http404:
            self.entry = entry_type(request, path)
        if not isinstance(self.entry, entry_type):
            raise Exception(('Error creating entry at %s: apparently it '
                +'already existed and was type %s rather than %s') % (path,
                self.entry.__class__.__name__, entry_type.__name__))
        self.entry.state = models.State.objects.get(descr=self.state)
        self.entry.save()

        # Save options
        from zadig.applets.standard.models import EntryOptions
        options = EntryOptions(entry=self.entry, no_navigation=self.no_nav)
        options.save()

        # Determine the max existing version number
        self.max_existing_version_number = 0
        if self.entry.vobject_set.count():
            self.max_existing_version_number = self.entry.vobject_set.order_by(
                         '-version_number')[0].version_number
            
    def post_migrate(self, request, path, entry_type=None):
        """The "migrate" method of a subclass should first call "migrate" in
        this class, then do any subclass-specific job, then call this method to
        do some common endwork."""
        if self.alternative_lang:
            self.entry.set_altlang(self.alternative_lang)
            self.entry.save()


class PlonePage(PloneObject):
    __plone_image_views = { '/image_large': 768, '/image_preview': 400,
        '/image_mini': 200, '/image_thumb': 128, '/image_tile': 64,
        '/image_icon': 32, '/image_listing': 16 }

    def __fix_tag_ref(self, tag, attr, base):
        """attr is string holding a referencing attribute, such as "href" or
        "src"; tag is a tag having attr; and base is the url base. This method
        converts tag so that its attr is an absolute path (in case it was
        relative), and also fixes Plone's image references."""
        if not tag[attr].startswith('/') and not re.match('\w+://', tag[attr]):
            tag[attr] = '/' + join_path(base, tag[attr])
        if tag[attr].endswith(tuple(self.__plone_image_views.keys())):
            image_view = '/' + tag[attr].rsplit('/', 1)[1]
            tag[attr] = '%s/__resized__/%d' % (tag[attr].rpartition('/')[0],
                                           self.__plone_image_views[image_view])

    def __init__(self, url, soup=None, editsoup=None):
        PloneObject.__init__(self, url, soup=soup, editsoup=editsoup)
        # Plone sometimes contains an identical div inside the div, therefore
        # rather than searching for an assumed single div with a given id,
        # we pick the innermost.
        divs = self.soup.findAll('div', id='parent-fieldname-text')
        text = divs[-1] if divs else None
        self.content = text

    def fix_content(self, request, path):
        """Make several appropriate changes to the HTML read from Plone. On
        entry self.content is practically a soup; on exit it's a string."""

        # Empty if empty
        if not self.content:
            self.content = u''
            return

        # Take headings one level up: h2 becomes h1 and h3 becomes h2. h4 to
        # h9 should not exist, but if they do they are converted to h2 - they
        # may break but at least they won't get lost.
        for h2 in self.content.findAll('h2'):
            h1 = Tag(self.soup, "h1")
            h1.insert(0, h2.renderContents())
            h2.replaceWith(h1)
        for h3 in self.content.findAll(re.compile('^h[3456789]$')):
            h2 = Tag(self.soup, "h2")
            h2.insert(0, h3.renderContents())
            h3.replaceWith(h2)

        # Fix internal references
        b = self.soup.find('base')
        base = urlparse(b['href'])[2] if b else path
        if not base.endswith('/'):
            base = '/'.join(split_path(base)[:-1])
        for attr in ('href', 'src'):
            for tag in self.content.findAll(True, attrs={attr: True}):
                self.__fix_tag_ref(tag, attr, base)

        # Modify some classes of images: image-right becomes floatRight etc.
        for tag in self.soup.findAll('img', { 'class': 'image-right' }):
            tag['class'] = 'floatRight'
        for tag in self.soup.findAll('img', { 'class': 'image-left' }):
            tag['class'] = 'floatLeft'
        
        self.content = u''.join([unicode(x) for x in self.content.contents])

    @transaction.commit_on_success
    def migrate(self, request, path):
        super(PlonePage, self).migrate(request, path, models.PageEntry)
        self.fix_content(request, path)
        nvobject = models.VPage(entry=self.entry,
            version_number=self.max_existing_version_number+1,
            language=self.language,
            format = models.ContentFormat.objects.get(descr='html'),
            date = self.modification_time, content = sanitize_html(self.content))
        nvobject.request = request
        nvobject.save()
        nmetatags = models.VObjectMetatags(vobject=nvobject,
            language=self.language, title=unicode(self.title),
            short_title=unicode(self.short_title),
            description=unicode(self.description))
        nmetatags.save()
        self.post_migrate(request, path, models.PageEntry)


class PloneImage(PloneObject):

    def __init__(self, url, soup=None, editsoup=None):
        PloneObject.__init__(self, url, soup=soup, editsoup=editsoup)
        assert(url.endswith('/view'))
        url = url[:-5]
        response = get_response(url)
        self.mimetype = response.info().type
        self.content =  response.read()

    @transaction.commit_on_success
    def migrate(self, request, path):
        from django.core.files.base import ContentFile
        from mimetypes import guess_extension
        super(PloneImage, self).migrate(request, path, models.ImageEntry)
        f = ContentFile(self.content)
        extension = guess_extension(self.mimetype)
        nvobject = models.VImage(entry=self.entry, date=self.modification_time,
                            version_number=self.max_existing_version_number+1)
        nvobject.content.save('%s-0001%s'%(self.entry.name, extension), f)
        nvobject.request = request
        nvobject.save()
        f.close()
        nmetatags = models.VObjectMetatags(vobject=nvobject,
            language=self.language, title=unicode(self.title),
            description=unicode(self.description))
        nmetatags.save()
        self.post_migrate(request, path, models.ImageEntry)


class PloneFile(PloneObject):
    def __init__(self, url, soup=None, editsoup=None):
        PloneObject.__init__(self, url, soup=soup, editsoup=editsoup)
        assert(url.endswith('/view'))
        url = url[:-5]
        response = get_response(url)
        self.mimetype = response.info().type
        self.content =  response.read()

    @transaction.commit_on_success
    def migrate(self, request, path):
        from django.core.files.base import ContentFile
        from mimetypes import guess_extension
        super(PloneFile, self).migrate(request, path, models.FileEntry)
        f = ContentFile(self.content)
        extension = guess_extension(self.mimetype)
        nvobject = models.VFile(entry=self.entry, date=self.modification_time,
                            version_number=self.max_existing_version_number+1)
        nvobject.content.save('%s-0001%s'%(self.entry.name, extension), f)
        nvobject.request = request
        nvobject.save()
        f.close()
        nmetatags = models.VObjectMetatags(vobject=nvobject,
            language=self.language, title=unicode(self.title),
            description=unicode(self.description))
        nmetatags.save()
        self.post_migrate(request, path, models.FileEntry)


class PloneLink(PloneObject):

    def __init__(self, url, soup=None, editsoup=None):
        PloneObject.__init__(self, url, soup=soup, editsoup=editsoup)
        self.target = self.soup.find('p', attrs={'class':'documentDescription'}
                                ).findNextSibling('p').a['href']

    @transaction.commit_on_success
    def migrate(self, request, path):
        super(PloneLink, self).migrate(request, path, models.LinkEntry)
        nvobject = models.VLink(entry=self.entry, date=self.modification_time,
            version_number=self.max_existing_version_number+1,
            language=self.language, target = self.target)
        nvobject.request = request
        nvobject.save()
        nmetatags = models.VObjectMetatags(vobject=nvobject,
            language=self.language, title=self.title,
            description=self.description)
        nmetatags.save()
        self.post_migrate(request, path, models.LinkEntry)


class PloneDefaultFolderView(PloneObject):

    @transaction.commit_on_success
    def migrate(self, request, path):
        super(PloneDefaultFolderView, self).migrate(request, path,
                                            models.InternalRedirectionEntry)
        nvobject = models.VInternalRedirection(entry=self.entry,
            version_number=self.max_existing_version_number+1,
            target=self.entry.container)
        nvobject.request = request
        nvobject.save()
        nmetatags = models.VObjectMetatags(vobject=nvobject,
            language=self.language, title=unicode(self.title),
            description=unicode(self.description))
        nmetatags.save()
        self.post_migrate(request, path, models.InternalRedirectionEntry)

    def post_migrate(self, request, path, entry_type=None):
        # We need to handle alternative language specially; it applies to our
        # folder, not to us.
        if self.alternative_lang:
            target = self.entry.rcontainer
            target.set_altlang(self.alternative_lang)
            target.save()
            self.alternative_lang = None
        super(PloneDefaultFolderView, self).post_migrate(request, path,
                                            models.InternalRedirectionEntry)


class PloneFolder(PlonePage):

    def __init__(self, url, soup=None, editsoup=None):
        PlonePage.__init__(self, url, soup=soup, editsoup=editsoup)
        # Does it have a default view?
        if self.soup.find('a', id='_folderChangeDefaultPage'):
            # Yes - also check its plain view contents then
            url = self.url
            if not url.endswith('/'): url += '/'
            self.foldersoup = BeautifulSoup(get_response(url+'view').read())
        else:
            # No - Consider empty content
            self.content = ''
            self.foldersoup = self.soup

    def __get_language_list(self):
        """Return the set of available LinguaPlone languages by looking at the
        language selector. May return an empty set."""
        result = set()
        language_selector = self.soup.find('ul', id='portal-languageselector')
        if not language_selector: return result
        for li in language_selector.findAll('li'):
            setting_command = li.a['href'][-15:]
            assert(setting_command.startswith('set_language='))
            result.add(setting_command[-2:])
        return result

    def __get_folder_contents(self):
        """Return the list of urls of the objects contained in the folder by
        looking in its contents view in all available languages."""
        # The 'base url' is the folder url ending in '/folder_contents'.
        baseurl = self.url
        if not baseurl.endswith('/'): baseurl += '/'
        baseurl += 'folder_contents?show_all=true'
        # Find all possible urls to examine;
        # .../folder_contents?show_all=true&set_language=en and so on,
        # depending on available languages, and put them in urls_to_examine
        langs = self.__get_language_list()
        urls_to_examine = []
        if not langs:
            urls_to_examine.append(baseurl)
        else:
            for lang in langs:
                urls_to_examine.append('%s&set_language=%s' % (baseurl, lang))
        # Now actually examine each of these urls
        result = []
        for contents_url in urls_to_examine:
            soup = BeautifulSoup(get_response(contents_url).read())
            listing_table = soup.find('table', id='listing-table')
            if listing_table:
                tr_elements = listing_table.tbody('tr')
                for tr in tr_elements:
                    subobject_url = tr.a['href']
                    if subobject_url.endswith('/folder_contents'):
                        subobject_url = subobject_url[:-16]
                    if urljoin(PLONE_URL, subobject_url) in PLONE_EXCLUDE: 
                        logging.debug("Excluding "+subobject_url)
                        continue
                    if not subobject_url in result:
                        result.append(subobject_url)
        logging.debug("Folder contents: " + str(result),)
        return result

    def __migrate_folder_contents(self, path):
        for url in self.__get_folder_contents():
            plone_object = PloneObject(url)
            if url.endswith('/view'): url = url[:-5] # Probably an image
            npath = join_path(path, url.split('/')[-1])
            plone_object.migrate(request, npath)

    @transaction.commit_on_success
    def migrate(self, request, path):
        # Zadig does not have folders, so we'll become a page. First: the old
        # folder's title, if different from its default page's title, becomes
        # the new page's short title.
        folder_title = get_title(self.foldersoup)
        if folder_title != self.title:
            self.short_title = folder_title
        # Now migrate the page.
        super(PloneFolder, self).migrate(request, path)
        # But also migrate the contents of the folder
        self.__migrate_folder_contents(path)
        self.post_migrate(request, path)

# Default configuration values
LOG_LEVEL = 'warn'
PLONE_EXCLUDE = ()

# Read configuration file
execfile(sys.argv[1])

logging.basicConfig(level=logging.__dict__[LOG_LEVEL.upper()])

# Convert PLONE_EXCLUDE to absolute urls
PLONE_EXCLUDE = [urljoin(PLONE_URL, x) for x in PLONE_EXCLUDE]

# Prepare a request.user object to have ready
from django.http import HttpRequest
from django.contrib.auth.models import User
request = HttpRequest()
request.user = User.objects.get(username=OWNER)

plone_object = PloneObject(PLONE_URL)
path = TARGET_PATH
try:
    entry = models.Entry.objects.get_by_path(request, path)
    if ('REMOVE_TARGET' in globals()) and REMOVE_TARGET:
        entry.delete()
except Http404:
    pass
plone_object.migrate(request, path)
