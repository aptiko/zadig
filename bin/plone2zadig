#!/usr/bin/python
"""
plone2zadig converts a Plone site to a Zadig site. It does so
by visiting the Plone site on the web. The script must log on the
Plone site as a user who has edit permissions on all pages (the
administrator for example).

Usage: plone2zadig config_file

The config_file a collection of lines of the form "OPTION=value".  It
is actually a Python program that defines several variables. The
options are:

The options are:

  PLONE_URL
      The topmost Plone url to start converting. That page and all its
      subpages will be read and converted.

  PLONE_AUTH
      The value the __ac cookie should have. It must be a user capable
      of editing all the objects from PLONE_URL downwards.

  PLONE_LANG
      If present, it is the value of the I18N_LANGUAGE cookie, which
      defines the LinguaPlone language requested. If absent, no
      I18N_LANGUAGE cookie is sent.

  TARGET_PATH
      Will migrate PLONE_URL to this Zadig path, and subobjects to
      subpaths.

  REMOVE_TARGET
      Specifies what happens if TARGET_PATH already exists. If True,
      the TARGET_PATH and its subentries are deleted before migration;
      if False (the default), its content is overwritten, as is the
      content of any already existing subentry. When such overwriting
      occurs, the existing object and the overwriting object must be
      of the same type, or an exception is raised.

  OWNER
      The objects created in Zadig will belong to this user.

  DEFAULT_LANGUAGE
      When a Plone page is "language neutral", it will be considered
      to be in this language.

  LOG_LEVEL
      The logging level; one of DEBUG, INFO, WARNING, ERROR, and
      CRITICAL.  Default is WARNING. Don't use CRITICAL, it will miss
      the errors.

All the above except PLONE_LANG, TARGET_PATH and LOG_LEVEL are
compulsory.

"""

import sys
import urllib2
import logging
from urlparse import urlparse
from cgi import parse_qs

from BeautifulSoup import BeautifulSoup, Tag

from django.conf import settings
from django.db import transaction

from zadig.core.utils import sanitize_html, split_path, join_path
from zadig.core import models

# Read configuration file
execfile(sys.argv[1])


class UnknownPloneObjectType(Exception): pass


def get_response(url):
    """Get the data from the url, which should be Plone. Send the logon cookie
    during the request, to make sure we are logged on to Plone."""
    request = urllib2.Request(url)
    cookies = '__ac="%s"' % (PLONE_AUTH,)
    if ('PLONE_LANG' in globals()) and PLONE_LANG:
        cookies += '; I18N_LANGUAGE="%s"' % (PLONE_LANG,)
    request.add_header('Cookie', cookies)
    return urllib2.urlopen(request)

def fix_uri(uri, base):
    """If uri is a relative path, return the absolute path; otherwise return
    uri itself."""
    import re
    if uri.startswith('/') or re.match('\w+://',uri):
        return uri
    return '/' + join_path(base, uri)


class PloneObject(object):

    def __new__(cls, url, soup=None):
        """Don't return a PloneObject; return a subclass object, depending on
        what we find at the url."""
        if cls != PloneObject:
            # It's a subclass being created
            return super(PloneObject, cls).__new__(cls)
        logging.info("Working on %s" % (url,))
        assert(soup is None)
        soup = BeautifulSoup(get_response(url).read())
        t = soup.find('li', id='contentview-folderContents')
        if t:
            # It has a contents tab, therefore it could be a folder
            folder_contents_link = t.a['href']
            if not url.endswith('/'): url += '/'
            if folder_contents_link == url + 'folder_contents':
                # Yes, it's a folder
                logging.debug("(It's a folder)")
                return super(PloneObject, cls).__new__(PloneFolder)
            # Otherwise, we assume it is the default folder view
            logging.debug("(It's a default folder view)")
            return super(PloneObject, cls).__new__(PloneDefaultFolderView)
        body_classes = soup.find('body')['class'].split()
        if 'template-document_view' in body_classes:
            logging.debug("(It's a page)")
            return super(PloneObject, cls).__new__(PlonePage)
        if 'template-image_view' in body_classes:
            logging.debug("(It's an image)")
            return super(PloneObject, cls).__new__(PloneImage)
        if 'template-link_view' in body_classes:
            logging.debug("(It's a link)")
            return super(PloneObject, cls).__new__(PloneLink)
        if 'template-file_view' in body_classes:
            logging.debug("(It's a file)")
            return super(PloneObject, cls).__new__(PloneFile)
        raise UnknownPloneObjectType("Unknown object type at "+url)
        raise UnknownPloneObjectType("Unknown object type at "+url)

    def __find_alternative_lang(self, path):
        """Determine a page in another language which is a translation of
        this page and which exists in the target database."""
        self.alternative_lang = None
        for x in self.soup.find('ul', id='portal-languageselector'
                                                            ).findAll('li'):
            (d1, d2, apath, d4, query, d6) = urlparse(x.a['href'])
            altlang = parse_qs(query).get('set_language', '')[0] 
            if altlang==self.language.id or split_path(apath)==split_path(path):
                continue
            e = models.Entry.objects.get_by_path(request, apath)
            while e:
                e = e.descendant
                if isinstance(e, models.InternalRedirectionEntry):
                    e = e.vobject.target
                else:
                    break
            else:
                continue
            if split_path(e.path)==split_path(path): continue
            self.alternative_lang = e.path
            break
        logging.debug("Alternative language: "+str(self.alternative_lang))

    def __init__(self, url, soup=None, editsoup=None):
        """Retrieve title, description and state from a Plone page;
        for subclasses, also retrieve content. soup is the BeautifulSoup object
        resulting from parsing the url. editsoup is the soup resulting from
        clicking the Plone "Edit" tab."""
        self.url = url
        if not soup:
            html = get_response(url).read()
            soup = BeautifulSoup(html)
        if not editsoup:
            editurl = soup.find('li', attrs={'id': 'contentview-edit'}
                                                                    ).a['href']
            html = get_response(editurl).read()
            editsoup = BeautifulSoup(html)
        self.soup = soup
        self.editsoup = editsoup
        self.title = self.soup.find(True,
                            id='parent-fieldname-title').string.strip()
        self.short_title = ''
        self.description = self.editsoup.find('textarea', id='description'
                                                            ).string
        if not self.description: self.description = ""
        self.state = self.soup.find('dl', id='plone-contentmenu-workflow'
            ).dt('span')[1].string.strip()
                            
    def migrate(self, request, path, entry_type):
        """This is always called from a subclass and does a little common part
        of the job at the beginning, most important of which is to create
        and save the entry."""
        # Find language and other settings of object by checking the contents of
        # its various views.
        a = self.editsoup.find('input', attrs={'id': 'excludeFromNav'})
        self.no_nav = 'checked' in [x[0] for x in a.attrs]
        l = self.editsoup.find('select', attrs={'id': 'language'}).find(
                            'option', attrs={'selected': 'selected'})
        self.language = models.Language.objects.get(id=l['value'] if l
                                                    else DEFAULT_LANGUAGE)
        self.__find_alternative_lang(path)

        # Prepare and save the entry
        self.entry = models.Entry.objects.get_by_path(request, path)
        # No need to check REMOVE_TARGET at this point, if True then the entry
        # will have already been removed and self.entry at this point will be
        # None.
        if self.entry:
            self.entry = self.entry.descendant
        else:
            self.entry = entry_type(request, path)
        if not isinstance(self.entry, entry_type):
            raise Exception(('Error creating entry at %s: apparently it '
                +'already existed was type %s rather than %s') % (path,
                self.entry.__class__.__name__, entry_type.__name__))
        self.entry.state = models.State.objects.get(descr=self.state)
        self.entry.save()

        # Determine the max existing version number
        self.max_existing_version_number = 0
        if self.entry.vobject_set.count():
            self.max_existing_version_number = self.entry.vobject_set.order_by(
                         '-version_number')[0].version_number
            
    def post_migrate(self, request, path, entry_type=None):
        """The "migrate" method of a subclass should first call "migrate" in
        this class, then do any subclass-specific job, then call this method to
        do some common endwork."""
        if self.alternative_lang:
            self.entry.set_altlang(self.alternative_lang)
            self.entry.save()


class PlonePage(PloneObject):

    def __init__(self, url, soup=None, editsoup=None):
        PloneObject.__init__(self, url, soup=soup, editsoup=editsoup)
        # Plone sometimes contains an identical div inside the div, therefore
        # rather than searching for an assumed single div with a given id,
        # we pick the innermost.
        divs = self.soup.findAll('div', id='parent-fieldname-text')
        text = divs[-1] if divs else None
        self.content = text

    def fix_content(self, request, path):
        """Make several appropriate changes to the HTML read from Plone. On
        entry self.content is practically a soup; on exit it's a string."""

        # Empty if empty
        if not self.content:
            self.content = u''
            return

        # Take headings one level up
        for h2 in self.content.findAll('h2'):
            h1 = Tag(self.soup, "h1")
            h1.insert(0, h2.renderContents())
            h2.replaceWith(h1)
        for h3 in self.content.findAll('h3'):
            h2 = Tag(self.soup, "h2")
            h2.insert(0, h3.renderContents())
            h3.replaceWith(h2)

        # Fix internal references
        b = self.soup.find('base')
        base = urlparse(b['href'])[2] if b else path
        if not base.endswith('/'):
            base = '/'.join(split_path(base)[:-1])
        for attr in ('href', 'src'):
            for tag in self.content.findAll(True, attrs={attr: True}):
                tag[attr] = fix_uri(tag[attr], base)
                if tag.name == u'img' and tag[attr].endswith('/image_preview'):
                    tag[attr] = tag[attr][:-13] + '__resized__/'
        
        self.content = u''.join([unicode(x) for x in self.content.contents])

    @transaction.commit_on_success
    def migrate(self, request, path):
        super(PlonePage, self).migrate(request, path, models.PageEntry)
        self.fix_content(request, path)
        nvobject = models.VPage(entry=self.entry,
            version_number=self.max_existing_version_number+1,
            language=self.language,
            format = models.ContentFormat.objects.get(descr='html'),
            content = sanitize_html(self.content))
        nvobject.request = request
        nvobject.save()
        nmetatags = models.VObjectMetatags(vobject=nvobject,
            language=self.language, title=unicode(self.title),
            short_title=unicode(self.short_title),
            description=unicode(self.description))
        nmetatags.save()
        # FIXME: Should be in superclass, other types also have no_nav
        from zadig.applets.standard.models import EntryOptions
        options = EntryOptions(entry=self.entry, no_navigation=self.no_nav)
        options.save()
        self.post_migrate(request, path, models.PageEntry)


class PloneImage(PloneObject):

    def __init__(self, url, soup=None, editsoup=None):
        PloneObject.__init__(self, url, soup=soup, editsoup=editsoup)
        assert(url.endswith('/view'))
        url = url[:-5]
        response = get_response(url)
        self.mimetype = response.info().type
        self.content =  response.read()
    @transaction.commit_on_success
    def migrate(self, request, path):
        from django.core.files.base import ContentFile
        from mimetypes import guess_extension
        super(PloneImage, self).migrate(request, path, models.ImageEntry)
        f = ContentFile(self.content)
        extension = guess_extension(self.mimetype)
        nvobject = models.VImage(entry=self.entry,
                            version_number=self.max_existing_version_number+1)
        nvobject.content.save('%s-0001%s'%(self.entry.name, extension), f)
        nvobject.request = request
        nvobject.save()
        f.close()
        nmetatags = models.VObjectMetatags(vobject=nvobject,
            language=self.language, title=unicode(self.title),
            description=unicode(self.description))
        nmetatags.save()
        self.post_migrate(request, path, models.ImageEntry)


class PloneFile(PloneObject):
    def __init__(self, url, soup=None, editsoup=None):
        PloneObject.__init__(self, url, soup=soup, editsoup=editsoup)
        assert(url.endswith('/view'))
        url = url[:-5]
        response = get_response(url)
        self.mimetype = response.info().type
        self.content =  response.read()
    @transaction.commit_on_success
    def migrate(self, request, path):
        from django.core.files.base import ContentFile
        from mimetypes import guess_extension
        super(PloneFile, self).migrate(request, path, models.FileEntry)
        f = ContentFile(self.content)
        extension = guess_extension(self.mimetype)
        nvobject = models.VFile(entry=self.entry,
                            version_number=self.max_existing_version_number+1)
        nvobject.content.save('%s-0001%s'%(self.entry.name, extension), f)
        nvobject.request = request
        nvobject.save()
        f.close()
        nmetatags = models.VObjectMetatags(vobject=nvobject,
            language=self.language, title=unicode(self.title),
            description=unicode(self.description))
        nmetatags.save()
        self.post_migrate(request, path, models.FileEntry)


class PloneLink(PloneObject):

    def __init__(self, url, soup=None, editsoup=None):
        PloneObject.__init__(self, url, soup=soup, editsoup=editsoup)
        self.target = self.soup.find('p', attrs={'class':'documentDescription'}
                                ).findNextSibling('p').a['href']
    @transaction.commit_on_success
    def migrate(self, request, path):
        super(PloneLink, self).migrate(request, path, models.LinkEntry)
        nvobject = models.VLink(entry=self.entry,
            version_number=self.max_existing_version_number+1,
            language=self.language, target = self.target)
        nvobject.request = request
        nvobject.save()
        nmetatags = models.VObjectMetatags(vobject=nvobject,
            language=self.language, title=self.title,
            description=self.description)
        nmetatags.save()
        self.post_migrate(request, path, models.LinkEntry)


class PloneDefaultFolderView(PloneObject):

    @transaction.commit_on_success
    def migrate(self, request, path):
        super(PloneDefaultFolderView, self).migrate(request, path,
                                            models.InternalRedirectionEntry)
        nvobject = models.VInternalRedirection(entry=self.entry,
            version_number=self.max_existing_version_number+1,
            target=self.entry.container)
        nvobject.request = request
        nvobject.save()
        nmetatags = models.VObjectMetatags(vobject=nvobject,
            language=self.language, title=unicode(self.title),
            description=unicode(self.description))
        nmetatags.save()
        self.alternative_lang = None
        self.post_migrate(request, path, models.InternalRedirectionEntry)


class PloneFolder(PlonePage):

    def __init__(self, url, soup=None, editsoup=None):
        PlonePage.__init__(self, url, soup=soup, editsoup=editsoup)
        # Does it have a default view?
        if self.soup.find('a', id='_folderChangeDefaultPage'):
            # Yes - also check its plain view contents then
            url = self.url
            if not url.endswith('/'): url += '/'
            self.foldersoup = BeautifulSoup(get_response(url+'view').read())
        else:
            # No - Consider empty content
            self.content = ''
            self.foldersoup = self.soup

    @transaction.commit_on_success
    def migrate(self, request, path):
        # Zadig does not have folders, so we'll become a page. First: the old
        # folder's title, if different from its default page's title, becomes
        # the new page's short title.
        folder_title = self.foldersoup.find(True,
                            id='parent-fieldname-title').string.strip()
        if folder_title != self.title:
            self.short_title = folder_title
        # Now migrate the page.
        super(PloneFolder, self).migrate(request, path)
        # But also migrate the contents of the folder
        url = self.url
        if not url.endswith('/'): url += '/'
        url += 'folder_contents'
        soup = BeautifulSoup(get_response(url).read())
        tr_elements = soup.find('table', id='listing-table').tbody('tr')
        for tr in tr_elements:
            url = tr.a['href']
            if url.endswith('/folder_contents'): url = url[:-16]
            plone_object = PloneObject(url)
            if url.endswith('/view'): url = url[:-5] # Probably an image 
            npath = join_path(path, url.split('/')[-1])
            plone_object.migrate(request, npath)
        self.post_migrate(request, path)


logging.basicConfig(level=logging.__dict__[LOG_LEVEL.upper()]
    if 'LOG_LEVEL' in globals() else logging.WARNING)

# We use HttpRequest as a small hack. Some Entry methods require request to be
# passed to them, but they hardly use anything but request.user. So we set
# that and we're OK.
from django.http import HttpRequest
from django.contrib.auth.models import User
request = HttpRequest()
request.user = User.objects.get(username=OWNER)

plone_object = PloneObject(PLONE_URL)
path = TARGET_PATH
entry = models.Entry.objects.get_by_path(request, path)
if entry and ('REMOVE_TARGET' in globals()) and REMOVE_TARGET:
    entry.delete()
plone_object.migrate(request, path)
